import React, { useState, useRef, useEffect } from 'react';
import axios from 'axios';
import { RiCloseLine } from 'react-icons/ri';
import { FaComments, FaPaperPlane, FaHistory, FaTrash } from 'react-icons/fa';
import '../styles/ChatBox.css';

const ChatBox = () => {
    const [messages, setMessages] = useState([]);
    const [newMessage, setNewMessage] = useState('');
    const [isChatOpen, setIsChatOpen] = useState(false);
    const [loading, setLoading] = useState(false);
    const [showHistory, setShowHistory] = useState(false);
    const [error, setError] = useState(null);
    const messagesEndRef = useRef(null);

    // T·ª± ƒë·ªông cu·ªôn xu·ªëng cu·ªëi khi c√≥ tin nh·∫Øn m·ªõi
    useEffect(() => {
        if (messagesEndRef.current) {
            messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
        }
    }, [messages]);

    useEffect(() => {
        if (isChatOpen && showHistory) {
            fetchChatHistory();
        }
    }, [isChatOpen, showHistory]);

    // üü¢ L·∫•y l·ªãch s·ª≠ chat t·ª´ backend
    const fetchChatHistory = async () => {
        setLoading(true);
        console.log("üì• ƒêang l·∫•y l·ªãch s·ª≠ chat...");
        try {
            const response = await axios.get('http://localhost:5000/api/chat/history', {
                params: { userID: '64fa1a3b5e2c4b2d98a6e7f2' }, // Thay th·∫ø b·∫±ng ObjectId th·∫≠t
            });

            console.log("‚úÖ L·ªãch s·ª≠ chat nh·∫≠n ƒë∆∞·ª£c:", response.data);
            setMessages(response.data);
            setError(null);
        } catch (err) {
            console.error('‚ùå L·ªói khi l·∫•y l·ªãch s·ª≠ chat:', err);
            setError('Kh√¥ng th·ªÉ t·∫£i l·ªãch s·ª≠ tr√≤ chuy·ªán');
        } finally {
            setLoading(false);
        }
    };

    // üü¢ X√≥a l·ªãch s·ª≠ chat
    const clearChatHistory = async () => {
        if (!window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a to√†n b·ªô l·ªãch s·ª≠ tr√≤ chuy·ªán?')) return;
        setLoading(true);
        console.log("üóë X√≥a l·ªãch s·ª≠ chat...");

        try {
            await axios.delete('http://localhost:5000/api/chat/clear', {
                params: { userID: '64fa1a3b5e2c4b2d98a6e7f2' }, // Thay th·∫ø b·∫±ng ObjectId th·∫≠t
            });

            console.log("‚úÖ ƒê√£ x√≥a l·ªãch s·ª≠ chat!");
            setMessages([]);
            setError(null);
            alert('ƒê√£ x√≥a l·ªãch s·ª≠ tr√≤ chuy·ªán');
        } catch (err) {
            console.error('‚ùå L·ªói khi x√≥a l·ªãch s·ª≠ chat:', err);
            setError('Kh√¥ng th·ªÉ x√≥a l·ªãch s·ª≠ tr√≤ chuy·ªán');
        } finally {
            setLoading(false);
        }
    };

    const handleSendMessage = async () => {
        if (newMessage.trim() === '' || loading) return;

        const userMessage = { sender: 'user', content: newMessage, timestamp: new Date() };
        setMessages(prevMessages => [...prevMessages, userMessage]);
        setNewMessage('');
        setLoading(true);

        try {
            const response = await axios.post('http://localhost:5000/api/chat/send', {
                userID: '64fa1a3b5e2c4b2d98a6e7f2', // Thay th·∫ø b·∫±ng ObjectId th·∫≠t
                message: newMessage,
            });

            console.log("Ph·∫£n h·ªìi t·ª´ server:", response.data); // Ki·ªÉm tra ph·∫£n h·ªìi th·ª±c t·∫ø

            const aiReply = response.data.response?.trim() || "AI kh√¥ng c√≥ ph·∫£n h·ªìi.";
            const aiMessage = { sender: 'ai', content: aiReply, timestamp: new Date() };

            setMessages(prevMessages => [...prevMessages, aiMessage]);
        } catch (error) {
            console.error('L·ªói khi g·ª≠i tin nh·∫Øn:', error);
            setMessages(prevMessages => [...prevMessages, { sender: 'ai', content: "AI kh√¥ng c√≥ ph·∫£n h·ªìi.", timestamp: new Date() }]);
        } finally {
            setLoading(false);
        }
    };

    const formatTime = timestamp => new Date(timestamp).toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' });

    return (
        <div className="chatbox-container">
            {!isChatOpen ? (
                <div className="chat-icon" onClick={() => setIsChatOpen(true)} title="M·ªü chat">
                    <FaComments size={30} />
                </div>
            ) : (
                <div className="chat-box">
                    <div className="chat-header">
                        <h3>Tr·ª£ l√Ω Du l·ªãch Qu·∫£ng Nam</h3>
                        <div className="chat-controls">
                            <button className="history-btn" onClick={() => setShowHistory(!showHistory)} title={showHistory ? "·∫®n l·ªãch s·ª≠" : "Hi·ªán l·ªãch s·ª≠"}><FaHistory /></button>
                            {showHistory && <button className="clear-btn" onClick={clearChatHistory} title="X√≥a l·ªãch s·ª≠"><FaTrash /></button>}
                            <button className="close-btn" onClick={() => setIsChatOpen(false)} title="ƒê√≥ng chat"><RiCloseLine /></button>
                        </div>
                    </div>
                    <div className="chat-messages">
                        {messages.length === 0 && !loading && (
                            <div className="welcome-message">
                                <p>Xin ch√†o! T√¥i l√† tr·ª£ l√Ω du l·ªãch Qu·∫£ng Nam. B·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ:</p>
                                <ul>
                                    <li>C√°c ƒë·ªãa ƒëi·ªÉm du l·ªãch n·ªïi ti·∫øng ·ªü Qu·∫£ng Nam</li>
                                    <li>Kh√°ch s·∫°n v√† nh√† ngh·ªâ</li>
                                    <li>ƒê·∫∑c s·∫£n v√† ·∫©m th·ª±c ƒë·ªãa ph∆∞∆°ng</li>
                                    <li>Ph∆∞∆°ng ti·ªán di chuy·ªÉn</li>
                                    <li>L·ªãch s·ª≠ v√† vƒÉn h√≥a Qu·∫£ng Nam</li>
                                </ul>
                            </div>
                        )}
                        {messages.map((message, index) => (
                            <div key={index} className={`chat-message ${message.sender}`}>
                                <div className="message-content">{message.content}</div>
                                {message.timestamp && <div className="message-time">{formatTime(message.timestamp)}</div>}
                            </div>
                        ))}
                        {loading && (
                            <div className="chat-message ai loading">
                                <div className="typing-indicator"><span></span><span></span><span></span></div>
                            </div>
                        )}
                        <div ref={messagesEndRef} />
                    </div>
                    <div className="chat-input">
                        <input type="text" value={newMessage} onChange={(e) => setNewMessage(e.target.value)} placeholder="Nh·∫≠p tin nh·∫Øn..." onKeyDown={(e) => e.key === 'Enter' && handleSendMessage()} disabled={loading} />
                        <button onClick={handleSendMessage} disabled={loading || !newMessage.trim()} className="send-button"><FaPaperPlane /></button>
                    </div>
                </div>
            )}
        </div>
    );
};

export default ChatBox;